name: Deploy to Production

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    env:
      TF_VAR_environment: prod
      TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
    outputs:
      ecr_repository_url: ${{ steps.tf_outputs.outputs.ecr_repository_url }}
      ecs_cluster_name: ${{ steps.tf_outputs.outputs.ecs_cluster_name }}
      ecs_service_name: ${{ steps.tf_outputs.outputs.ecs_service_name }}
      load_balancer_url: ${{ steps.tf_outputs.outputs.load_balancer_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        run: terraform fmt -check

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        run: terraform plan -input=false -out=tfplan

      - name: Terraform apply
        if: github.ref == 'refs/heads/main'
        run: terraform apply -input=false tfplan

      - name: Capture Terraform outputs
        if: github.ref == 'refs/heads/main'
        id: tf_outputs
        run: |
          terraform output -json > tf_outputs.json
          echo "ecr_repository_url=$(jq -r '.ecr_repository_url.value // empty' tf_outputs.json)" >> "$GITHUB_OUTPUT"
          echo "ecs_cluster_name=$(jq -r '.cluster_name.value // empty' tf_outputs.json)" >> "$GITHUB_OUTPUT"
          echo "ecs_service_name=$(jq -r '.service_name.value // empty' tf_outputs.json)" >> "$GITHUB_OUTPUT"
          echo "load_balancer_url=$(jq -r '.load_balancer_url.value // empty' tf_outputs.json)" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy application
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY_URL: ${{ needs.terraform.outputs.ecr_repository_url || secrets.ECR_REPOSITORY_URL }}
          ECS_CLUSTER_NAME: ${{ needs.terraform.outputs.ecs_cluster_name || secrets.ECS_CLUSTER_NAME }}
          ECS_SERVICE_NAME: ${{ needs.terraform.outputs.ecs_service_name || secrets.ECS_SERVICE_NAME }}
          LOAD_BALANCER_URL: ${{ needs.terraform.outputs.load_balancer_url || secrets.LOAD_BALANCER_URL }}
        run: |
          ./scripts/deploy.sh
